
                             Configurotocol 1.0


Resumen
Configurotocol es un protocolo desarrollado para poder configurar en tiempo real
y de forma remota la aplicación proxy Isecu.

Estado del documento
Este protocolo forma parte de la entrega del Trabajo Práctico Especial para la
materia de Protocolos de Comunicación, de la carrera Ingeniería Informática del
Instituto Teconológico de Buenos Aires (ITBA).


1. Introducción

Configurotocol es un protocolo sin estado que permite a una entidad cliente con-
sultar y setear parámetros de configuración de la aplicación proxy Isecu.
Se basa en el formato JSON (http://www.json.org).

2. Descripción

El protocolo está diseñado para poder ejecutar comandos de configuración en tiem-
po real y de forma remota. Un comando va a estar formado por instrucciones. A
continuación se definen ambos conceptos y sus respectivos formatos.

2.1 Objeto

Un objeto es un conjunto de 2 elementos: clave y valor. Un objeto es igual a 
otro si ambos contienen la misma clave. Tanto la clave como el valor son case 
sensitive.
Un objeto puede ser:
                
                       simple -->   "clave" : "valor"

          compuesto --> "clave" : ["valor1", "valor2", ... , "valorn"]
          
O puede contener otro objeto:
		
        {"calve":"valor","claveObjeto":{"clave1":"valor2","clave2":"valor2"}}

2.2 Comando

Un comando es un conjunto de objetos dentro de llaves. Los objetos están 
separados por comas. Que un comando sea un conjunto, implica que no contiene 
elementos repetidos y que el orden en que se encuentran es irrelevante.
Ejemplo de comando:
	
                {"nombre" : "Thulsa", "apellido" : "Doom"} 

3. Comandos válidos

Anteriormente se definió el formato de los comandos; en esta sección se 
especifican los comandos que soporta el protocolo.
Un comando es considerado válido si cumple con las siguientes reglas:

    A. Respeta el formato de comando especificado en 2.2.
    B. Posee al menos dos objetos, "auth" (Especificado en la sección 3.1) y
    	"type" (Especificado en la sección 3.2).
    C. En caso de ser del tipo "query" debe cumplir con lo especificado en 3.3.
    D. En caso de ser del tipo "assignation" debe cumplir con lo especificado 
    	en 3.4.
    E. En caso de ser del tipo "delete" debe cumplir con lo especificado en 3.5.
    
3.1 Objeto "auth"

El objeto auth es obligatorio, debe tener el siguiente formato:
           "auth" : ["user", "pass" ]
Donde "user" corresponde al nombre de usuario del administrador y pass a su
contraseña.

3.2 Objeto "type"

El objeto type es obligatorio, debe ser de tipo simple y contener alguno de los 
siguientes valores:
   - "query"
   - "assignation"
   - "delete"

3.2.1 Comandos de tipo "query"

Un comando que cumple con las reglas A y B, y es del tipo "query," se considera
válido si además posee un objeto con clave "parameter", cuyo valor sea alguno de
los siguientes:
   - caccess
   - multiplex
   - silence
   - leet
   - hash
   - rangeBlacklist
   - loginsBlacklist
   - ipBlacklist
   - netBlacklist

3.2.2 Comandos de tipo "assignation"

Un comando que cumple con las reglas A y B, y es del tipo "assignation", se 
considera válido si posee al menos uno de los siguientes objetos, y son todos 
válidos:

3.2.2.1 Blacklist

El objeto blacklist debe ser de formato compuesto y de algún tipo de los 
siguientes:

   - Tipo "range":
      "blacklist":["range","jid","10:15:00","18:30:00"]

   - Tipo "logins":
      "blacklist":["logins","jid","5"]
 
   - Tipo "ip":
      "blacklist":["ip","10.0.0.3"]

   - Tipo "net":
      "blacklist":["net", "10.0.0.0/24"}

3.2.2.2 Acceso concurrente
El objeto caccess debe ser de formato compuesto y debe respetar el siguiente 
formato:
   "caccess":["jid", "3"]

3.2.2.3 Multiplexador de cuentas
El objeto multiplex debe ser de formato compuesto y debe respetar el siguiente
formato:
   "multiplex":["jid", "10.0.0.1"]

3.2.2.4 Silenciar usuarios
El objeto silence debe ser de formato simple y debe respetar el siguiente forma-
to:
   "silence":"jid"

3.2.2.5 Filtros
El objeto filter debe ser de formato compuesto y debe respetar el siguiente for-
mato:
   "filter":["filtername", "jid", "state"]
Donde filtername puede ser leet o hash y state puede ser on u off.

3.2.3 Comandos de tipo "delete"
Un comando que cumple con las reglas A y B, y es del tipo "delete", se 
considera válido si posee al menos uno de los siguientes objetos, y son todos 
válidos:

3.2.3.1 Blacklist
El objeto blacklist debe ser de formato compuesto y de algún tipo de los siguientes:

   - Tipo "range":
      "blacklist":["range","jid"]

   - Tipo "logins":
      "blacklist":["logins","jid"]
 
   - Tipo "ip":
      "blacklist":["ip","10.0.0.3"]

   - Tipo "net":
      "blacklist":["net", "10.0.0.0/24"}

3.2.3.2 Acceso concurrente
El objeto caccess debe ser de formato simple y debe respetar el siguiente 
formato:
   "caccess":"jid"

3.2.3.3 Multiplexador de cuentas
El objeto multiplex debe ser de formato simple y debe respetar el siguiente
formato:
   "multiplex":"jid"

3.2.3.4 Silenciar usuarios
El objeto silence debe ser de formato simple y debe respetar el siguiente forma-
to:
   "silence":"jid"

3.2.3.5 Filtros
El objeto filter debe ser de formato compuesto y debe respetar el siguiente for-
mato:
   "filter":["filtername", "jid"]
Donde filtername puede ser leet o hash y state puede ser on u off.

4. Respuestas
Luego de la ejecución de un comando la aplicación enviará una respuesta.
Toda respuesta va a contener el objeto status, con valor "OK" o "ERROR" corres-
pondiente a una respuesta satisfactoria o no, respectivamente. Luego de cualquier
comando de tipo "assignation" o "delete" se va a responder con una respuesta 
conformada sólo con un objeto status. En caso de que el comando haya sido de 
tipo "query" los resultados de esa query se enviarán en formato compuesto o 
simple, dependiendo de la cantidad de resultados obtenidos, en el objeto "data".
